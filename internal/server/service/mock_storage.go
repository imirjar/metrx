// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imirjar/metrx/internal/server/service (interfaces: Storager)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/imirjar/metrx/internal/models"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddMetric mocks base method.
func (m *MockStorager) AddMetric(arg0 context.Context, arg1 models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetric indicates an expected call of AddMetric.
func (mr *MockStoragerMockRecorder) AddMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetric", reflect.TypeOf((*MockStorager)(nil).AddMetric), arg0, arg1)
}

// AddMetrics mocks base method.
func (m *MockStorager) AddMetrics(arg0 context.Context, arg1 []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetrics indicates an expected call of AddMetrics.
func (mr *MockStoragerMockRecorder) AddMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetrics", reflect.TypeOf((*MockStorager)(nil).AddMetrics), arg0, arg1)
}

// ReadMetric mocks base method.
func (m *MockStorager) ReadMetric(arg0 context.Context, arg1 models.Metrics) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMetric", arg0, arg1)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMetric indicates an expected call of ReadMetric.
func (mr *MockStoragerMockRecorder) ReadMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMetric", reflect.TypeOf((*MockStorager)(nil).ReadMetric), arg0, arg1)
}

// ReadMetrics mocks base method.
func (m *MockStorager) ReadMetrics(arg0 context.Context, arg1 string) ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMetrics", arg0, arg1)
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMetrics indicates an expected call of ReadMetrics.
func (mr *MockStoragerMockRecorder) ReadMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMetrics", reflect.TypeOf((*MockStorager)(nil).ReadMetrics), arg0, arg1)
}
