// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imirjar/metrx/internal/server/controller/http (interfaces: Service)

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/imirjar/metrx/internal/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// UpdateMetric mocks base method.
func (m *MockService) UpdateMetric(arg0 context.Context, arg1 models.Metrics) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", arg0, arg1)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockServiceMockRecorder) UpdateMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockService)(nil).UpdateMetric), arg0, arg1)
}

// UpdateMetrics mocks base method.
func (m *MockService) UpdateMetrics(arg0 context.Context, arg1 []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockServiceMockRecorder) UpdateMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockService)(nil).UpdateMetrics), arg0, arg1)
}

// ViewMetric mocks base method.
func (m *MockService) ViewMetric(arg0 context.Context, arg1 models.Metrics) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewMetric", arg0, arg1)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewMetric indicates an expected call of ViewMetric.
func (mr *MockServiceMockRecorder) ViewMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewMetric", reflect.TypeOf((*MockService)(nil).ViewMetric), arg0, arg1)
}

// ViewMetrics mocks base method.
func (m *MockService) ViewMetrics(arg0 context.Context) (map[string][]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewMetrics", arg0)
	ret0, _ := ret[0].(map[string][]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewMetrics indicates an expected call of ViewMetrics.
func (mr *MockServiceMockRecorder) ViewMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewMetrics", reflect.TypeOf((*MockService)(nil).ViewMetrics), arg0)
}
